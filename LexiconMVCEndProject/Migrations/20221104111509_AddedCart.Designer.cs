// <auto-generated />
using System;
using LexiconMVCEndProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LexiconMVCEndProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221104111509_AddedCart")]
    partial class AddedCart
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LexiconMVCEndProject.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ff143f0d-3fab-4bc9-b427-c6f5cfcb54c6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "936f9de3-3274-4e5e-a452-e656fdfb52cd",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL9aNTX+UhTPsZvv9ouMoNCmanxALoeLUQcR2GWy7iAZhzleoEDSYtSsQK3eZ6IlJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "93dd33a6-3020-4cbc-960d-dc31269357a2",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "3f43054c-46de-43c5-901a-cb37820d89d5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31e9a18b-c158-4a45-bc10-4f6c2653a791",
                            Email = "test1@test.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST1@TEST.SE",
                            NormalizedUserName = "TEST1@TEST.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEOe/6E1exg9/5RefZmhhy7g6/hr4v0Z/4/gxpl4opfp0EMUM3w/alOdXo6lT1XlHSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87ff5e62-79d2-4408-9f29-ce86c261978f",
                            TwoFactorEnabled = false,
                            UserName = "test1@test.se"
                        },
                        new
                        {
                            Id = "430cbe72-a50e-4b07-b731-2c2a59e86eab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "171fd790-9f45-486c-aea1-6768b38dfbfe",
                            Email = "test2@test.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST2@TEST.SE",
                            NormalizedUserName = "TEST2@TEST.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEOlg9Ji2D8Og9FbwRr9HAlvZH3cj068uFGnvblAYW1nHPXZ1Gt7N1qYZ2qjMDqyYFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5895a5d-c84a-4afc-ae67-558e8cc87dd9",
                            TwoFactorEnabled = false,
                            UserName = "test2@test.se"
                        },
                        new
                        {
                            Id = "bc392b4a-48f8-4033-86e0-a3905d11992d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d3e368e-4b30-46b9-84ab-1e6b1e4a9e48",
                            Email = "test4@test.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST4@TEST.SE",
                            NormalizedUserName = "TEST4@TEST.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAENLEBQr+jpXp90TOSjNpdQUNPwXX1ZHw5hvix/qMVlfeHSOLzH1oLIf3epBPU8VCxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1d3ba67c-a45e-492d-bc48-fc5d22c1de71",
                            TwoFactorEnabled = false,
                            UserName = "test4@test.se"
                        });
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            CartId = 1,
                            CustomerId = 1,
                            TotalPrice = 0.0
                        });
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Diffrent kind's of keyboards",
                            Name = "Keyboard"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Diffrent kind's of computer mouses",
                            Name = "Computer Mouse"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Diffrent kind's of headphones",
                            Name = "Headphone"
                        },
                        new
                        {
                            CategoryId = 4,
                            Description = "Diffrent kind's of headphonestands",
                            Name = "Headphonestand"
                        });
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.CreditCard", b =>
                {
                    b.Property<int>("CCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CCId"), 1L, 1);

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CCV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("CCId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CreditCards");

                    b.HasData(
                        new
                        {
                            CCId = 1,
                            Bank = "Nordea",
                            CCV = "852",
                            CreditNumber = "4566 3621 3658 7895",
                            CustomerId = 1,
                            Value = 20000.0
                        },
                        new
                        {
                            CCId = 2,
                            Bank = "Swedbank",
                            CCV = "963",
                            CreditNumber = "7521 1245 3652 8541",
                            CustomerId = 2,
                            Value = 30000.0
                        },
                        new
                        {
                            CCId = 3,
                            Bank = "Bank of America",
                            CCV = "248",
                            CreditNumber = "7596 8521 4563 8514",
                            CustomerId = 3,
                            Value = 50000.0
                        });
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "Björnidet 13",
                            ApplicationUserId = "3f43054c-46de-43c5-901a-cb37820d89d5",
                            City = "Björneborg",
                            Country = "Sweden",
                            Email = "test1@test.se",
                            FirstName = "Anders",
                            LastName = "Karlsson",
                            PhoneNumber = "073 888 54 12",
                            ZipCode = "123 90"
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "Medborgargatan 39",
                            ApplicationUserId = "430cbe72-a50e-4b07-b731-2c2a59e86eab",
                            City = "Malmö",
                            Country = "Sweden",
                            Email = "test2@test.se",
                            FirstName = "Karin",
                            LastName = "Svensson",
                            PhoneNumber = "074 123 97 41",
                            ZipCode = "782 21"
                        },
                        new
                        {
                            CustomerId = 3,
                            Address = "Björkvägen 89",
                            ApplicationUserId = "bc392b4a-48f8-4033-86e0-a3905d11992d",
                            City = "Karlstad",
                            Country = "Sweden",
                            Email = "test4@test.se",
                            FirstName = "Sune",
                            LastName = "Stig",
                            PhoneNumber = "077 564 28 31",
                            ZipCode = "329 85"
                        });
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IMG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductSaldo")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Brand = "Thundercat",
                            CategoryID = 3,
                            Description = "Thundercats High end gaming headset for the ultimate gaming experience!",
                            IMG = "/Images/Headphones1.jpg",
                            Name = "Arc 100XT",
                            Price = 1299.0,
                            ProductSaldo = 100
                        },
                        new
                        {
                            ProductId = 2,
                            Brand = "Thundercat",
                            CategoryID = 3,
                            Description = "Thundercats Mind tier gaming headset",
                            IMG = "/Images/Headphones2.jpg",
                            Name = "Thunder 75Z",
                            Price = 899.0,
                            ProductSaldo = 180
                        },
                        new
                        {
                            ProductId = 3,
                            Brand = "Siberia",
                            CategoryID = 3,
                            Description = "Siberia's High end gaming headset for the ultimate gaming experience!",
                            IMG = "/Images/Headphones3.jpg",
                            Name = "Zero C100",
                            Price = 1599.0,
                            ProductSaldo = 50
                        },
                        new
                        {
                            ProductId = 4,
                            Brand = "Siberia",
                            CategoryID = 3,
                            Description = "Siberia's allround headset for gaming and daily use!",
                            IMG = "/Images/Headphones4.jpg",
                            Name = "ZummerXT30",
                            Price = 599.0,
                            ProductSaldo = 50
                        },
                        new
                        {
                            ProductId = 5,
                            Brand = "StudioFactory",
                            CategoryID = 3,
                            Description = "StudioFactory's top of the line studio recording headset",
                            IMG = "/Images/Headphones5.jpg",
                            Name = "Session1",
                            Price = 2999.0,
                            ProductSaldo = 30
                        },
                        new
                        {
                            ProductId = 6,
                            Brand = "Steeldesign",
                            CategoryID = 4,
                            Description = "Robust headphonestand made with stainless steel and wood",
                            IMG = "/Images/HeadphoneStand1.jpg",
                            Name = "Model3",
                            Price = 799.0,
                            ProductSaldo = 90
                        },
                        new
                        {
                            ProductId = 7,
                            Brand = "GohanStudio",
                            CategoryID = 1,
                            Description = "basic keyboard from GohanStudio",
                            IMG = "/Images/Keyboard1.png",
                            Name = "Krillin8000",
                            Price = 499.0,
                            ProductSaldo = 200
                        },
                        new
                        {
                            ProductId = 8,
                            Brand = "GohanStudio",
                            CategoryID = 1,
                            Description = "Mid tier gaming keyboard from Ghohanstudio",
                            IMG = "/Images/Keyboard2.png",
                            Name = "Gohan10x",
                            Price = 999.0,
                            ProductSaldo = 90
                        },
                        new
                        {
                            ProductId = 9,
                            Brand = "GohanStudio",
                            CategoryID = 1,
                            Description = "High end gaming keyboard from Ghohanstudio for the ultimate gaming experience!",
                            IMG = "/Images/Keyboard3.jpg",
                            Name = "Goku9000",
                            Price = 1200.0,
                            ProductSaldo = 50
                        },
                        new
                        {
                            ProductId = 10,
                            Brand = "Tundra",
                            CategoryID = 2,
                            Description = "Mid tier gaming mouse from tundra with 3 speed level's",
                            IMG = "/Images/Mouse1.jpg",
                            Name = "33SpeedDemon",
                            Price = 599.0,
                            ProductSaldo = 98
                        },
                        new
                        {
                            ProductId = 11,
                            Brand = "Tundra",
                            CategoryID = 2,
                            Description = "Mid tier gaming mouse from tundra",
                            IMG = "/Images/Mouse2.png",
                            Name = "NineCA3",
                            Price = 799.0,
                            ProductSaldo = 120
                        },
                        new
                        {
                            ProductId = 12,
                            Brand = "Tundra",
                            CategoryID = 2,
                            Description = "Basic alaround keyboard from tundra",
                            IMG = "/Images/Mouse3.png",
                            Name = "TP3",
                            Price = 399.0,
                            ProductSaldo = 200
                        },
                        new
                        {
                            ProductId = 13,
                            Brand = "Tundra",
                            CategoryID = 2,
                            Description = "High end gaming mouse from tundra",
                            IMG = "/Images/Mouse4.png",
                            Name = "X-0",
                            Price = 1100.0,
                            ProductSaldo = 60
                        });
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Receipt", b =>
                {
                    b.Property<int>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiptId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("OrderDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.HasKey("ReceiptId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.SalesOrder", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesOrderId"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SalesOrderId");

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.ToTable("SalesOrders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9336c3c7-d072-422d-a921-6828d891dd51",
                            ConcurrencyStamp = "91ae4c32-e26c-4e14-a2e1-8eaad6a9e8dc",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4a18a108-c833-499c-907e-f2e8b475a20f",
                            ConcurrencyStamp = "20cb26a4-c078-4aeb-b7b8-d9924495f702",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ff143f0d-3fab-4bc9-b427-c6f5cfcb54c6",
                            RoleId = "9336c3c7-d072-422d-a921-6828d891dd51"
                        },
                        new
                        {
                            UserId = "3f43054c-46de-43c5-901a-cb37820d89d5",
                            RoleId = "4a18a108-c833-499c-907e-f2e8b475a20f"
                        },
                        new
                        {
                            UserId = "430cbe72-a50e-4b07-b731-2c2a59e86eab",
                            RoleId = "4a18a108-c833-499c-907e-f2e8b475a20f"
                        },
                        new
                        {
                            UserId = "bc392b4a-48f8-4033-86e0-a3905d11992d",
                            RoleId = "4a18a108-c833-499c-907e-f2e8b475a20f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Cart", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("LexiconMVCEndProject.Models.Cart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.CartItem", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LexiconMVCEndProject.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.CreditCard", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.Customer", "Customer")
                        .WithMany("CreditCardList")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Customer", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Customer")
                        .HasForeignKey("LexiconMVCEndProject.Models.Customer", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Product", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Receipt", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.Customer", "Customer")
                        .WithOne("Receipt")
                        .HasForeignKey("LexiconMVCEndProject.Models.Receipt", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.SalesOrder", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.Cart", "Cart")
                        .WithOne("SalesOrder")
                        .HasForeignKey("LexiconMVCEndProject.Models.SalesOrder", "CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LexiconMVCEndProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.ApplicationUser", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Cart", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("SalesOrder")
                        .IsRequired();
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Customer", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("CreditCardList");

                    b.Navigation("Receipt")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
