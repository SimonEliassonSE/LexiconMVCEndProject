// <auto-generated />
using System;
using LexiconMVCEndProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LexiconMVCEndProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LexiconMVCEndProject.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a75f6917-fcb4-407e-858c-c26fa046298d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8711fad-2ca1-4e08-b17c-cf5cdf16a2b5",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIJp37bJGiLuxngMnoChCrMHKa9uSk2T3omb2O2hgt8vL4mJaiKt5/jZjfF9610dCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "004ce4d7-ca94-43d1-a358-93787c58f78c",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "dae92839-b7e2-435d-92b4-f3a8242d72bb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "550d5be6-217b-4588-9ad2-3886de14fb48",
                            Email = "test1@test.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST1@TEST.SE",
                            NormalizedUserName = "TEST1@TEST.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEC5rp+T6AVKe04RK/sxJvLkj2qRyFYSqXwhkxcmZ4gl86z5E7w/awq3lK8alKju5mQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "11dcfb30-967c-46ac-b946-37e29c5dfddc",
                            TwoFactorEnabled = false,
                            UserName = "test1@test.se"
                        },
                        new
                        {
                            Id = "cb652d26-e606-4aef-9970-8ad7740b9447",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "320bf6f5-617f-4044-b01a-4160ae67d00d",
                            Email = "test2@test.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST2@TEST.SE",
                            NormalizedUserName = "TEST2@TEST.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEDk3h/MdzhTIgNLljOigvT8fMSnv0NDiWWIE6P0idkua+iNgtpd0wKjrwF5yUVnWYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c71fb117-946f-4edc-96f5-ede66a47008d",
                            TwoFactorEnabled = false,
                            UserName = "test2@test.se"
                        },
                        new
                        {
                            Id = "cdbc7041-12db-4c07-87af-ba9ad63ce84f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ac630c2-bac1-4286-83a9-59d72fcb139b",
                            Email = "test4@test.se",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST4@TEST.SE",
                            NormalizedUserName = "TEST4@TEST.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEFz2h3a2b0pzroNweTFvR8zc3bjmcjdwsIMQGCjXNPKx2gQG1fN0uERSWqXwJVDgdg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63af0ee8-1723-4e2d-b4ea-9d995d68ee8d",
                            TwoFactorEnabled = false,
                            UserName = "test4@test.se"
                        });
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Diffrent kind's of keyboards",
                            Name = "Keyboard"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Diffrent kind's of computer mouses",
                            Name = "Computer Mouse"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Diffrent kind's of headphones",
                            Name = "Headphone"
                        },
                        new
                        {
                            CategoryId = 4,
                            Description = "Diffrent kind's of headphonestands",
                            Name = "Headphonestand"
                        });
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.CreditCard", b =>
                {
                    b.Property<int>("CCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CCId"), 1L, 1);

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CCV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("CCId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CreditCards");

                    b.HasData(
                        new
                        {
                            CCId = 1,
                            Bank = "Nordea",
                            CCV = "852",
                            CreditNumber = "4566 3621 3658 7895",
                            CustomerId = 1,
                            Value = 20000.0
                        },
                        new
                        {
                            CCId = 2,
                            Bank = "Swedbank",
                            CCV = "963",
                            CreditNumber = "7521 1245 3652 8541",
                            CustomerId = 2,
                            Value = 30000.0
                        },
                        new
                        {
                            CCId = 3,
                            Bank = "Bank of America",
                            CCV = "248",
                            CreditNumber = "7596 8521 4563 8514",
                            CustomerId = 3,
                            Value = 50000.0
                        });
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "Björnidet 13",
                            ApplicationUserId = "dae92839-b7e2-435d-92b4-f3a8242d72bb",
                            City = "Björneborg",
                            Country = "Sweden",
                            Email = "test1@test.se",
                            FirstName = "Anders",
                            LastName = "Karlsson",
                            PhoneNumber = "073 888 54 12",
                            ZipCode = "123 90"
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "Medborgargatan 39",
                            ApplicationUserId = "cb652d26-e606-4aef-9970-8ad7740b9447",
                            City = "Malmö",
                            Country = "Sweden",
                            Email = "test2@test.se",
                            FirstName = "Karin",
                            LastName = "Svensson",
                            PhoneNumber = "074 123 97 41",
                            ZipCode = "782 21"
                        },
                        new
                        {
                            CustomerId = 3,
                            Address = "Björkvägen 89",
                            ApplicationUserId = "cdbc7041-12db-4c07-87af-ba9ad63ce84f",
                            City = "Karlstad",
                            Country = "Sweden",
                            Email = "test4@test.se",
                            FirstName = "Sune",
                            LastName = "Stig",
                            PhoneNumber = "077 564 28 31",
                            ZipCode = "329 85"
                        });
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IMG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductSaldo")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Brand = "Thundercat",
                            CategoryID = 3,
                            Description = "Thundercats High end gaming headset for the ultimate gaming experience!",
                            IMG = "/Images/Headphones1.jpg",
                            Name = "Arc 100XT",
                            Price = 1299.0,
                            ProductSaldo = 100
                        },
                        new
                        {
                            ProductId = 2,
                            Brand = "Thundercat",
                            CategoryID = 3,
                            Description = "Thundercats Mind tier gaming headset",
                            IMG = "/Images/Headphones2.jpg",
                            Name = "Thunder 75Z",
                            Price = 899.0,
                            ProductSaldo = 180
                        },
                        new
                        {
                            ProductId = 3,
                            Brand = "Siberia",
                            CategoryID = 3,
                            Description = "Siberia's High end gaming headset for the ultimate gaming experience!",
                            IMG = "/Images/Headphones3.jpg",
                            Name = "Zero C100",
                            Price = 1599.0,
                            ProductSaldo = 50
                        },
                        new
                        {
                            ProductId = 4,
                            Brand = "Siberia",
                            CategoryID = 3,
                            Description = "Siberia's allround headset for gaming and daily use!",
                            IMG = "/Images/Headphones4.jpg",
                            Name = "ZummerXT30",
                            Price = 599.0,
                            ProductSaldo = 50
                        },
                        new
                        {
                            ProductId = 5,
                            Brand = "StudioFactory",
                            CategoryID = 3,
                            Description = "StudioFactory's top of the line studio recording headset",
                            IMG = "/Images/Headphones5.jpg",
                            Name = "Session1",
                            Price = 2999.0,
                            ProductSaldo = 30
                        },
                        new
                        {
                            ProductId = 6,
                            Brand = "Steeldesign",
                            CategoryID = 4,
                            Description = "Robust headphonestand made with stainless steel and wood",
                            IMG = "/Images/HeadphoneStand1.jpg",
                            Name = "Model3",
                            Price = 799.0,
                            ProductSaldo = 90
                        },
                        new
                        {
                            ProductId = 7,
                            Brand = "GohanStudio",
                            CategoryID = 1,
                            Description = "basic keyboard from GohanStudio",
                            IMG = "/Images/Keyboard1.png",
                            Name = "Krillin8000",
                            Price = 499.0,
                            ProductSaldo = 200
                        },
                        new
                        {
                            ProductId = 8,
                            Brand = "GohanStudio",
                            CategoryID = 1,
                            Description = "Mid tier gaming keyboard from Ghohanstudio",
                            IMG = "/Images/Keyboard2.png",
                            Name = "Gohan10x",
                            Price = 999.0,
                            ProductSaldo = 90
                        },
                        new
                        {
                            ProductId = 9,
                            Brand = "GohanStudio",
                            CategoryID = 1,
                            Description = "High end gaming keyboard from Ghohanstudio for the ultimate gaming experience!",
                            IMG = "/Images/Keyboard3.jpg",
                            Name = "Goku9000",
                            Price = 1200.0,
                            ProductSaldo = 50
                        },
                        new
                        {
                            ProductId = 10,
                            Brand = "Tundra",
                            CategoryID = 2,
                            Description = "Mid tier gaming mouse from tundra with 3 speed level's",
                            IMG = "/Images/Mouse1.jpg",
                            Name = "33SpeedDemon",
                            Price = 599.0,
                            ProductSaldo = 98
                        },
                        new
                        {
                            ProductId = 11,
                            Brand = "Tundra",
                            CategoryID = 2,
                            Description = "Mid tier gaming mouse from tundra",
                            IMG = "/Images/Mouse2.png",
                            Name = "NineCA3",
                            Price = 799.0,
                            ProductSaldo = 120
                        },
                        new
                        {
                            ProductId = 12,
                            Brand = "Tundra",
                            CategoryID = 2,
                            Description = "Basic alaround keyboard from tundra",
                            IMG = "/Images/Mouse3.png",
                            Name = "TP3",
                            Price = 399.0,
                            ProductSaldo = 200
                        },
                        new
                        {
                            ProductId = 13,
                            Brand = "Tundra",
                            CategoryID = 2,
                            Description = "High end gaming mouse from tundra",
                            IMG = "/Images/Mouse4.png",
                            Name = "X-0",
                            Price = 1100.0,
                            ProductSaldo = 60
                        });
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Receipt", b =>
                {
                    b.Property<int>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiptId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("OrderDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.HasKey("ReceiptId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.ReceiptItem", b =>
                {
                    b.Property<int>("ReceiptItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiptItemId"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IMG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiptId")
                        .HasColumnType("int");

                    b.HasKey("ReceiptItemId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("ReceiptItems");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.SalesOrder", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesOrderId"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SalesOrderId");

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.ToTable("SalesOrders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b3d39bec-aa2c-4600-8fa8-b31a43e81e12",
                            ConcurrencyStamp = "b9e7632e-77f6-49e8-b40f-e142cfdcd4a0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a1ff9473-6244-4730-800a-6c753162f8bc",
                            ConcurrencyStamp = "983985a3-28f3-4047-8c85-600d004c927f",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a75f6917-fcb4-407e-858c-c26fa046298d",
                            RoleId = "b3d39bec-aa2c-4600-8fa8-b31a43e81e12"
                        },
                        new
                        {
                            UserId = "dae92839-b7e2-435d-92b4-f3a8242d72bb",
                            RoleId = "a1ff9473-6244-4730-800a-6c753162f8bc"
                        },
                        new
                        {
                            UserId = "cb652d26-e606-4aef-9970-8ad7740b9447",
                            RoleId = "a1ff9473-6244-4730-800a-6c753162f8bc"
                        },
                        new
                        {
                            UserId = "cdbc7041-12db-4c07-87af-ba9ad63ce84f",
                            RoleId = "a1ff9473-6244-4730-800a-6c753162f8bc"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Cart", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("LexiconMVCEndProject.Models.Cart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.CartItem", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LexiconMVCEndProject.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.CreditCard", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.Customer", "Customer")
                        .WithMany("CreditCardList")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Customer", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Customer")
                        .HasForeignKey("LexiconMVCEndProject.Models.Customer", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Product", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Receipt", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.Customer", "Customer")
                        .WithMany("ReceiptList")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.ReceiptItem", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.Receipt", "Receipt")
                        .WithMany("ReceiptItems")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.SalesOrder", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.Cart", "Cart")
                        .WithOne("SalesOrder")
                        .HasForeignKey("LexiconMVCEndProject.Models.SalesOrder", "CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LexiconMVCEndProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LexiconMVCEndProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.ApplicationUser", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Cart", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("SalesOrder")
                        .IsRequired();
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Customer", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("CreditCardList");

                    b.Navigation("ReceiptList");
                });

            modelBuilder.Entity("LexiconMVCEndProject.Models.Receipt", b =>
                {
                    b.Navigation("ReceiptItems");
                });
#pragma warning restore 612, 618
        }
    }
}
